name: CI

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Tests
        run: npm test
# static code analysis job
  lint:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
# build job with artifact upload
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build Application
        run: npm run build

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: dist/
#docker build and push to github registry
  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    env:
      IMAGE_TAG: ${{ github.sha }}
      IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/my-app
    outputs:
      image: ${{ steps.set-output.outputs.image }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist/

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=sha 
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
          labels: |
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          load: true

#Trivy Vulnerability Scan
      - name: Run Trivy Vulnerability Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:sha-${{ env.IMAGE_TAG }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
#publish docker image to github registry
      - name: Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}:sha-${{ env.IMAGE_TAG }}
          labels: ${{ steps.meta.outputs.labels }}
          load: false
#set output for image
      - name: Set Output for Image
        id: set-output
        run: echo "image=${{ env.IMAGE_NAME }}:sha-${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

#Update Kubernetes Deployment
  update-deployment:
    name: Update Kubernetes Deployment
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && contains(github.ref, 'sha-')
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Git Configuration
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Update Deployment YAML
        run: |
          sed -i 's|image:.*|image: ${{ needs.docker.outputs.image }}|g' k8s/deployment.yaml

      - name: Commit and Push Changes
        run: |
          git add k8s/deployment.yaml
          git commit -m "Update deployment image to ${{ needs.docker.outputs.image }}" || echo "No changes to commit"
          git push 
    
        
